#!/usr/bin/env node

const fs = require('fs');
const moment = require('moment');
const _ = require('lodash');
const path = require('path');
const yargs = require('yargs');
const agent = require('superagent-promise')(require('superagent'), Promise);
const { translate } = require("google-translate-api-browser");
const { string } = require('yargs');
let dicc = {};

//Lang Codes https://ctrlq.org/code/19899-google-translate-languages

const argv = yargs.demandCommand(1).command('translate', 'translate provided file <filePath> to selected languages', {
    input: {
        alias: 'i',
        description: 'local path to the json file which will be translated',
        type: string
    }
}).option('languages', {
    alias: 'l',
    description: 'one or multiple comma-separated languages to which file will be translated',
    type: string
}).option('output', {
    alias: 'o',
    description: 'local path to the folder where output files will be placed',
    type: string
}).option('apiKey', {
    alias: 'k',
    description: 'API KEY from the Google Play Console',
    type: string
}).help()
    .alias('help', 'h').argv;

const inputFile = argv.input;
if (inputFile === undefined) {
    console.error('You must provide an input json file');
    return;
}

const languages = argv.languages;
if (languages === undefined || languages == '') {
    console.error('You must provide a comma-separated list of destination language codes.');
    return;
}
const destinationCodes = languages.split(',');
const outputFolder = argv.output ?? ".";
const apiKey = argv.apiKey;

const apiUrl = _.template('https://www.googleapis.com/language/translate/v2?key=<%= apiKey %>&q=<%= value %>&source=en&target=<%= languageKey %>');

const transformResponse = (res) => {
    return _.get(JSON.parse(res.text), ['data', 'translations', 0, 'translatedText'], '');
}

const getCache = (languageKey) => {
    try {
        dicc[languageKey] = {};
        let fileContent = fs.readFileSync(`./translateCache-${languageKey}.txt`, 'utf-8').split('\n');
        fileContent.map((line) => {
            let cached = line.split('|');
            if (cached[0]) dicc[languageKey][cached[0]] = cached[1];
        });
    } catch (error) {

    }
}
const cachedIndex = (key, value, languageKey) => {
    const line = key + '|' + value + '\n';
    dicc[languageKey][key] = value;
    fs.appendFileSync(`./translateCache-${languageKey}.txt`, line);
    return value;
}

function iterLeaves(value, keyChain, accumulator, languageKey) {
    accumulator = accumulator || {};
    keyChain = keyChain || [];
    if (_.isObject(value)) {
        return _.chain(value).reduce((handlers, v, k) => {
            return handlers.concat(iterLeaves(v, keyChain.concat(k), accumulator, languageKey));
        }, []).flattenDeep().value();
    } else {
        if (typeof value !== 'string')
            return value;

        return function () {
            if (!(value in dicc[languageKey])) {
                console.log(_.template('Translating <%= value %> to <%= languageKey %>')({ value, languageKey }));

                let prom;
                //Translates individual string to language code
                if (apiKey != '') {
                    //using apiKey
                    prom = agent('GET', apiUrl({
                        value: encodeURI(value),
                        languageKey,
                        apiKey
                    })).then(transformResponse)
                }
                else {
                    //using free api key
                    prom = translate(value, { to: languageKey })
                }

                return prom
                    .then((res) => cachedIndex(value, res, languageKey))
                    .catch((err) => {
                        cachedIndex(value, 'TRANSLATION_ERROR', languageKey);
                        console.log(err);
                    })
                    .then((text) => {
                        //Sets the value in the accumulator
                        _.set(accumulator, keyChain, text);

                        //This needs to be returned to it's eventually written to json
                        return accumulator;
                    });
            }
            else {
                console.log(value + ' cached: ' + dicc[languageKey][value]);
                _.set(accumulator, keyChain, dicc[languageKey][value]);
                return accumulator;
            }
        };
    }
}

if (!fs.existsSync(outputFolder)){
    fs.mkdirSync(outputFolder, { recursive: true });
}
Promise.all(_.reduce(destinationCodes, (sum, languageKey) => {    
    const fileName = _.template(`${outputFolder}/<%= languageKey %>-<%= timeStamp %>.json`)({
        languageKey,
        timeStamp: moment().unix()
    });

    //read languageKey Cache.
    getCache(languageKey);

    //Starts with the top level strings
    return sum.concat(_.reduce(iterLeaves(JSON.parse(fs.readFileSync(path.resolve(inputFile), 'utf-8')), undefined, undefined, languageKey), (promiseChain, fn) => {
        return promiseChain.then(fn);
    }, Promise.resolve()).then((payload) => {
        fs.writeFileSync(fileName, JSON.stringify(payload, null, 4));
    }).then(_.partial(console.log, 'Successfully translated all nodes, file output at ' + fileName)));
}, [])).then(() => {
    process.exit();
});
